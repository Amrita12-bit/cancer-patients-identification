# -*- coding: utf-8 -*-
"""Cancer_Prediction_Amrita.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F-sHB9jB2LG6xu0-FmjeCJR_SuTdedY3
"""

import pandas as pd

# Load the uploaded dataset
df = pd.read_csv('/content/data.csv')

# Show first 5 rows
df.head()





# Drop columns we don't need
df = df.drop(['id', 'Unnamed: 32'], axis=1)

# Check if any column has missing data
df.isnull().sum()

from sklearn.preprocessing import LabelEncoder, StandardScaler

# Convert 'M' and 'B' to 1 and 0
df['diagnosis'] = LabelEncoder().fit_transform(df['diagnosis'])

# Split into features (X) and target (y)
X = df.drop('diagnosis', axis=1)
y = df['diagnosis']

# Scale all the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)



from sklearn.cluster import KMeans

# Apply KMeans clustering (3 groups)
kmeans = KMeans(n_clusters=3, random_state=42)

# Predict cluster for each patient
clusters = kmeans.fit_predict(X_scaled)

# Add these clusters as a new column in original data
df['Cluster'] = clusters

# Show how many patients in each cluster
df['Cluster'].value_counts()



from sklearn.model_selection import train_test_split
import numpy as np

# Add the cluster column to scaled features
X_cluster = np.concatenate([X_scaled, clusters.reshape(-1, 1)], axis=1)

# Split into 80% training and 20% testing
X_train, X_test, y_train, y_test = train_test_split(X_cluster, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

# Create and train the model
log_model = LogisticRegression(max_iter=1000)
log_model.fit(X_train, y_train)

# Predict on test data
y_pred_log = log_model.predict(X_test)

# Show accuracy and other metrics
print("üéØ Logistic Regression Accuracy:", accuracy_score(y_test, y_pred_log))
print("\nüìù Classification Report:\n", classification_report(y_test, y_pred_log))

from sklearn.ensemble import RandomForestClassifier
from sklearn.neural_network import MLPClassifier

# üå≥ Random Forest Model
rf_model = RandomForestClassifier()
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)
print("üå≥ Random Forest Accuracy:", accuracy_score(y_test, y_pred_rf))
print("\nRandom Forest Report:\n", classification_report(y_test, y_pred_rf))

# üß† Neural Network Model
nn_model = MLPClassifier(max_iter=1000)
nn_model.fit(X_train, y_train)
y_pred_nn = nn_model.predict(X_test)
print("üß† Neural Network Accuracy:", accuracy_score(y_test, y_pred_nn))
print("\nNeural Network Report:\n", classification_report(y_test, y_pred_nn))

# Print Accuracy of all models
print("üìä Final Accuracy Comparison:")
print("Logistic Regression:", accuracy_score(y_test, y_pred_log))
print("Random Forest      :", accuracy_score(y_test, y_pred_rf))
print("Neural Network     :", accuracy_score(y_test, y_pred_nn))

